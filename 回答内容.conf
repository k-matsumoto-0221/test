## ECS on Fargate
- どの範囲で連携できるのか
	・サブネット設定次第で、同一リージョン内の複数 AZ 間でタスクを分散可能。
	・トラフィックの増減に応じて、複数 AZ 間で自動スケーリングが可能。
	・障害発生時、別 AZ でのタスク再配置により、継続的なサービス提供が可能。
- 課題
	・トラフィックの急増時に、タスクのスケーリングに時間がかかる場合がある。
	・長時間稼働や高負荷のワークロードでは、EC2 と比較してコストが高くなる場合がある（不採用になるかも）。

## RDS for PostgreSQL
- どの範囲で連携できるのか
	・マルチAZ構成をサポートし、プライマリ/スタンバイインスタンスを異なる AZ に配置可能。
	・リードレプリカは書き込み用のインスタンスとは異なる AZ に配置することが可能。
	・自動バックアップは複数の AZ に保存され、必要に応じて他 AZ でデータベースを復元することが可能。
- 課題
	・クエリ処理中はスケーリングが行えず、ダウンタイムが必要となる。
	・プライマリ障害発生時のフェイルオーバー中に、短時間の接続断が発生する。
	・リードレプリカは非同期レプリケーションのため、プライマリインスタンスとのデータ同期に遅延が発生する場合がある。

## Aurora Serverless v2
- どの範囲で連携できるのか
	・マルチ AZ クラスタがサポートされている
	・リードレプリカは書き込み用のインスタンスとは異なる AZ に配置することが可能。
	・それぞれ異なる AZ に Reader, Writer が配置して、負荷分散、冗長構成をしている。
- 課題
	・クエリ処理中はスケーリングが行えず、ダウンタイムが必要となる。
	・プライマリ障害発生時のフェイルオーバー中に、短時間の接続断が発生する。
	・PostgreSQL と比較して、コストが高くなる傾向になる。
	・ROS DATA API を経由してアクセスした場合は、レスポンスサイズを1 Mib 以下にする必要がある。超えた場合はリクエストが終了する。

## S3
- どの範囲で連携できるのか
	・同一リージョン内の複数 AZ に自動的にデータを分散することが可能。
	・クロスリージョンレプリケーションを利用することで、異なるリージョン間にもデータ同期ができる。
- 課題
	・データ保存量やリクエスト数に応じて課金されるため、大量のデータを保管・頻繁にアクセスする場合はコストが高くなる傾向にある。
	・誤削除やデータ破損が発生した場合、S3 Glacier などのアーカイブストレージからのデータ復旧に時間がかかる場合がある。
	・バージョニングやオブジェクトロックが有効な場合、古いデータの削除が煩雑になり、ストレージが肥大化しやすい。

## API Gateway
- どの範囲で連携できるのか
	・同一リージョン内のすべての AZ にリクエストを動的にルーティング可能。
	・Private エンドポイントを設定することで、特定の AZ に配置されたリソースと安全に通信が可能。
- 課題
	・API リクエスト数に応じた課金モデルのため、トラフィックが多い場合にはコストが高くなる傾向になる。
	・API Gateway のレスポンスサイズが最大 10MB に制限されている。
	・デフォルトのリクエストレート制限（スロットリング）により、高トラフィック時にリクエストが制限される可能性がある。

## Lambda
- どの範囲で連携できるのか
	・バッチ処理のタスク数や負荷に応じて Lambda が自動的にスケールアウトし、同一リージョン内の複数 AZ にタスクを分散可能。
	・ステートレス設計により、実行環境に依存せず、障害時に他 AZ での再実行や再配置が可能。
- 課題
	・Lambda 関数には最大 15 分の実行時間制限がある。
	・最初にタスクを実行する際、Cold Start 遅延により処理開始時間が遅れる場合がある。

## ElastiCache (Redis)
- どの範囲で連携できるのか
	・マルチ AZ 構成をサポートし、プライマリ/スタンバイノードを異なる AZ に配置可能。
	・リードレプリカを複数 AZ に配置することが可能。
	・クラスター構成でセッションデータをシャーディング（分割）できる。
- 課題
	・Redis はインメモリ型のデータストアのため、障害時にはデータが失われるリスクがある。
	・プライマリノードの障害時、スタンバイノードへの昇格には短時間の接続断が発生する。
	・リードレプリカへの同期が非同期で行われるため、セッションデータのリアルタイム性を求める場合に、プライマリとのデータ整合性に遅延が発生する可能性がある。
